{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { User } from './user.model';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\"; //import { UserDetailComponent } from '../user-detail/user-detail.component';\n//import { text } from 'stream/consumers';\n\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(myhttp, router, toastr) {\n      this.myhttp = myhttp;\n      this.router = router;\n      this.toastr = toastr;\n      this.exclusive = new Subject();\n      this.currentuser = new BehaviorSubject(null); //clearTimeout:any;\n\n      this.jwtHelperService = new JwtHelperService();\n      this.userurl = environment.baseurl + 'api/Users'; //urll: string = environment.baseurl;\n\n      this.listuser = [];\n      this.userdata = new User(); //single object for post /inset data\n    }\n\n    saveUser(userdata) {\n      return this.myhttp.post(this.userurl, userdata); //hit form data on post api to save\n    }\n\n    updateUser(data) {\n      return this.myhttp.put(`${this.userurl}/${data.userid}`, data); //hit form data on put api to save\n    }\n\n    getUser() {\n      return this.myhttp.get(this.userurl);\n    }\n\n    deleteUser(userid) {\n      return this.myhttp.delete(`${this.userurl}/${userid}`);\n    }\n\n    Login(logininfo) {\n      return this.myhttp.post(this.userurl + '/login', {\n        email: logininfo[0],\n        password: logininfo[1]\n      }, {\n        responseType: 'text'\n      }); //hit form data on post api to save\n    }\n\n    settoken(token) {\n      localStorage.setItem(\"acess_token\", token); //localStorage.setItem(\"refresh token\", token.refreshtoken);\n\n      this.loadcurrentuser(); //let date = new Date().getTime();\n      //let expdate = new Date\n\n      this.autologout(100000);\n    }\n\n    autologout(expdate) {\n      setTimeout(() => {\n        //this.ud.logout();\n        this.removetoken(); //this.router.navigateByUrl('/login');\n      }, expdate);\n    }\n\n    loadcurrentuser() {\n      const token = localStorage.getItem(\"acess_token\");\n      const userinfo = token != null ? this.jwtHelperService.decodeToken(token) : null;\n      console.log(userinfo);\n      const data = userinfo ? {\n        email: userinfo.email,\n        password: userinfo.password\n      } : null;\n      this.currentuser.next(data);\n    }\n\n    isloggedin() {\n      return localStorage.getItem(\"acess_token\") ? true : false;\n    }\n\n    removetoken() {\n      //this.toastr.success('Login Session Expires ');\n      //Swal.fire('Session Expires, Session Expires Again login');\n      alert('session expires');\n      setTimeout(() => {\n        localStorage.removeItem(\"acess_token\");\n      }, 10000);\n      this.router.navigateByUrl('/login');\n    }\n\n    gettoken() {\n      return localStorage.getItem(\"acess_token\");\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}