{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { of, map, interval, fromEvent, toArray, Subscription, debounceTime } from 'rxjs';\nimport { UserService } from '../../users/user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../users/user.service\";\nconst _c0 = [\"addbtn\"];\nconst _c1 = [\"myinput\"];\nexport let ObservableComponent = /*#__PURE__*/(() => {\n  class ObservableComponent {\n    constructor(useservice) {\n      this.useservice = useservice;\n      this.reqdata = null;\n    }\n\n    ngOnInit() {\n      this.useservice.exclusive.next(true);\n      const obaaj = of(['absar', 'ahmad', 'ahmaaad']); // const obaaj = of(['absar', 'ahmad', 'ahmaaad']);\n\n      obaaj.pipe(toArray()).subscribe(data => {\n        console.log(data);\n        this.print2(data);\n      });\n      const broadcast = interval(1000);\n      this.sub1 = broadcast.pipe(map(data => 'absar' + data)).subscribe(res => {\n        this.msg1 = res;\n      });\n      setTimeout(() => {\n        this.sub1.unsubscribe();\n      }, 10000);\n    }\n\n    ngAfterViewInit() {\n      let count = 1;\n      fromEvent(this.addbtn.nativeElement, 'click').subscribe(res => {\n        let countval = 'absar' + count++;\n        this.print(countval);\n      });\n      const searchitem = fromEvent(this.myinput.nativeElement, 'keyup').pipe(map(event => event.target.value), debounceTime(1000));\n      searchitem.subscribe(res => {\n        console.log(res);\n        this.reqdata = res;\n      });\n    }\n\n    print(val) {\n      let el = document.createElement('li');\n      el.innerText = val;\n      document.getElementById('licontainer').appendChild(el);\n    }\n\n    print2(val) {\n      let el = document.createElement('li');\n      el.innerText = val;\n      document.getElementById('licontainer2').appendChild(el);\n    }\n\n  }\n\n  ObservableComponent.ɵfac = function ObservableComponent_Factory(t) {\n    return new (t || ObservableComponent)(i0.ɵɵdirectiveInject(i1.UserService));\n  };\n\n  ObservableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ObservableComponent,\n    selectors: [[\"app-observable\"]],\n    viewQuery: function ObservableComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addbtn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myinput = _t.first);\n      }\n    },\n    decls: 28,\n    vars: 2,\n    consts: [[1, \"container\"], [1, \"card\"], [1, \"btn\", \"btn-primary\"], [\"addbtn\", \"\"], [\"id\", \"licontainer\"], [\"id\", \"licontainer2\"], [1, \"text-success\"], [\"type\", \"search\", \"placeholder\", \"search\"], [\"myinput\", \"\"]],\n    template: function ObservableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2, 3);\n        i0.ɵɵtext(4, \" add \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(5, \"div\", 0)(6, \"div\", 1);\n        i0.ɵɵelement(7, \"ul\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(8, \"hr\");\n        i0.ɵɵelementStart(9, \"div\", 0)(10, \"div\", 1);\n        i0.ɵɵelement(11, \"ul\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(12, \"hr\");\n        i0.ɵɵelementStart(13, \"div\", 0)(14, \"div\", 1)(15, \"p\");\n        i0.ɵɵtext(16, \"message\");\n        i0.ɵɵelementStart(17, \"strong\", 6);\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(19, \"hr\");\n        i0.ɵɵelementStart(20, \"div\", 0)(21, \"div\", 1);\n        i0.ɵɵelement(22, \"input\", 7, 8);\n        i0.ɵɵelementStart(24, \"span\");\n        i0.ɵɵtext(25, \"Requested data :\");\n        i0.ɵɵelementStart(26, \"strong\", 6);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(18);\n        i0.ɵɵtextInterpolate(ctx.msg1);\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate(ctx.reqdata);\n      }\n    }\n  });\n  return ObservableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}