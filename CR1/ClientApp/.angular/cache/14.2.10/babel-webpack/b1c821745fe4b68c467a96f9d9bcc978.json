{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from '../../users/user.service';\nlet UserFormComponent = class UserFormComponent {\n  constructor(useservice, formbuilder) {\n    this.useservice = useservice;\n    this.formbuilder = formbuilder;\n    this.userform = this.formbuilder.group({\n      userid: this.formbuilder.control(''),\n      name: this.formbuilder.control('', Validators.required),\n      age: this.formbuilder.control('', Validators.required),\n      cnic: this.formbuilder.control('', Validators.required),\n      dob: this.formbuilder.control('', Validators.required)\n    });\n  }\n\n  ngOnInit() {}\n\n  submit(userform) {\n    console.log('submit');\n\n    if (this.useservice.userdata.userid) {\n      this.insertuser(userform);\n    } else {\n      this.updateuser(userform);\n    }\n  }\n\n  insertuser(userform) {\n    this.useservice.saveUser().subscribe(d => {\n      this.resetform(userform);\n      this.refreshdata();\n      console.log('data saved');\n    });\n  }\n\n  updateuser(userform) {\n    this.useservice.updateUser().subscribe(d => {\n      this.resetform(userform);\n      this.refreshdata();\n      console.log('update dataa');\n    });\n  }\n\n  resetform(userform) {\n    userform.form.reset(); //this.useservice.userdata = new User();\n  }\n\n  refreshdata() {\n    this.useservice.getUser().subscribe(data => {\n      this.useservice.listuser = data;\n    });\n  }\n\n};\nUserFormComponent = __decorate([Component({\n  selector: 'app-user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.css']\n}), __metadata(\"design:paramtypes\", [UserService, FormBuilder])], UserFormComponent);\nexport { UserFormComponent };","map":null,"metadata":{},"sourceType":"module"}